function is_available_image_size(width, height) {
  var aspect = width / height * 1.0;
  return width > <%= Settings.minimum_image_width %> &&
    height > <%= Settings.minimum_image_height %> &&
    aspect < <%= Settings.allowed_image_aspect[0] / Settings.allowed_image_aspect[1] * 1.0 %> &&
    aspect > <%= Settings.allowed_image_aspect[1] / Settings.allowed_image_aspect[0] * 1.0 %>;
}

function resize_images() {
  $('#container').find('.box img').each(function () {
    width = <%= Settings.thumb_width %>;
    height = Math.floor($(this).height() * (width / $(this).width() * 1.0));
    if (is_available_image_size(width, height)) {
      $(this).width(width);
      $(this).height(height);
    } else {
      $(this).parent().remove();
    }
  });
}

function infinitescroll_options() {
  return {
    navSelector: '#page-nav',
    nextSelector: '#page-nav a',
    itemSelector: '.box',
    loading: {
      finishedMsg: 'image was finished.',
      img: '<%= asset_path 'loader.gif' %>'
    },
    state: {
      isDestroyed: false,
      isDone: false
    }
  };
}

function destroy_infinitescroll() {
  $container = $('#container');
  $container.infinitescroll('destroy');
  $container.data('infinitescroll', null);
}

function initialize_infinitescroll() {
  $container = $('#container');
  $container.infinitescroll(infinitescroll_options(), function (newElements) {
    $(newElements).css({ opacity: 0 }).imagesLoaded(function () {
      resize_images();
      $container.masonry('appended', this, true)
      this.animate({ opacity: 1 })
    });
  });
  $container.infinitescroll('bind');
}

var $container = $('#container');

<% if @clip.error_info.present? %>
  $container.html('<%= @clip.error_info %>');
  //$container.removeAttr('style');
<% else %>
  // 古い無限スクロールのメタデータを破棄
  destroy_infinitescroll();

  $container.html('&nbsp;');
  $container.attr('style', 'position: relative;');

  var page_nav = $('<div/>');
  page_nav.attr('id', 'page-nav');
  page_nav.html('<%= link_to 'next', page: @image_tags.next_page %>');
  page_nav.insertAfter('#container');

  var urls = [];
  // <div />で囲まないと、body 直下の img が取得できない
  var html = '<div><%= raw @html.gsub("'", '"').presence || (@clip.url && image_tag(@clip.url)) || '' %></div>';

  $(html).find('img').each(function() {
    var box = $('<div id="active_box" class="box" />');
    box.appendTo('#container');
    $(this).appendTo('#active_box');
    box.removeAttr('id');
  });

  $container.css({ opacity: 0 }).imagesLoaded(function() {
    resize_images();
    $(this).removeClass('hidden');
    $(this).masonry('reload');
    $(this).find('img:first').attr('id', 'selected');
    $(this).animate({ opacity: 1 });

    // 無限スクロール機能の初期化
    initialize_infinitescroll();
  });

  $container.on('click', '.box img', function() {
    $('img#selected').removeAttr('id');
    $(this).attr('id', 'selected');
    var url = $(this).attr('src');
    $('#clip_url').attr('value', url);
    var link = $('<a/>');
    link.attr('src', url);
    link.attr('id', 'link');
    link.insertBefore('img#selected');
    $(this).appedTo('#link')
    link.removeAttr('id');
  });

  $('#clip_origin_url').attr('value', '<%= @clip.origin_url %>');
<% end %>
